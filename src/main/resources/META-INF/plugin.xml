<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <id>com.codescene.vanilla</id>
    <name>CodeScene</name>
    <vendor>CodeScene</vendor>

    <depends>com.intellij.modules.platform</depends>

    <resource-bundle>messages.UiLabelsBundle</resource-bundle>

    <depends>Git4Idea</depends>

    <actions>
        <action
                text="Settings"
                id="ShowSettingsAction"
                icon="AllIcons.General.GearPlain"
                description="Open the settings dialog"
                class="com.codescene.jetbrains.actions.ShowSettingsAction"/>

        <action
                text="Collapse All"
                id="CollapseAllAction"
                icon="AllIcons.Actions.Collapseall"
                description="Collapse all Code Health Monitor entries"
                class="com.codescene.jetbrains.actions.CollapseAllAction"/>

        <action
                id="ShowDocumentationAction"
                text="CodeScene: Code Health Monitoring Help"
                icon="com.codescene.jetbrains.CodeSceneIcons.HELP"
                class="com.codescene.jetbrains.actions.ShowDocumentationAction"/>

        <group id="CodeSceneToolWindowSortGroup">
            <group id="CodeHealthMonitorSortGroupActions" icon="AllIcons.ObjectBrowser.SortByType" popup="true"
                   text="Sort Files By...">
                <separator text="Sort By"/>
                <action id="SortByScoreChangeAscending"
                        class="com.codescene.jetbrains.actions.CodeHealthMonitorSortGroupActions$SortByScoreChangeAscending"/>
                <action id="SortByScoreChangeDescending"
                        class="com.codescene.jetbrains.actions.CodeHealthMonitorSortGroupActions$SortByScoreChangeDescending"/>
                <action id="SortByFileName"
                        class="com.codescene.jetbrains.actions.CodeHealthMonitorSortGroupActions$SortByFileName"/>
            </group>
        </group>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <iconMapper mappingFile="CodeSceneIconMappings.json"/>

        <postStartupActivity implementation="com.codescene.jetbrains.listeners.ProjectStartupActivity"/>

        <notificationGroup id="CodeScene" displayType="STICKY_BALLOON"/>

        <applicationService serviceImplementation="com.codescene.jetbrains.config.global.CodeSceneGlobalSettingsStore"/>

        <applicationConfigurable
                parentId="tools"
                displayName="CodeScene"
                instance="com.codescene.jetbrains.components.settings.CodeSceneSettings"/>

        <toolWindow
                id="CodeScene"
                icon="com.codescene.jetbrains.CodeSceneIcons.CODESCENE_TW"
                factoryClass="com.codescene.jetbrains.components.window.CodeSceneToolWindowFactory"/>

        <!-- An empty language attribute applies to all languages -->
        <externalAnnotator
                language=""
                implementationClass="com.codescene.jetbrains.codeInsight.annotator.CodeSmellAnnotator"/>

        <!-- The order of code vision providers' declarations determines their display sequence in the IDE.
             Providers listed first appear last. Adjust this order to control the hierarchy of code smell warnings shown.
        -->
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.StringHeavyArgumentsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.PrimitiveObsessionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.PotentiallyLowCohesionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.OverallCodeComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FunctionsInSingleModuleCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ModularityIssueCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.MissingAbstractionsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LowCohesionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LinesOfDeclarationInSingleFileCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LinesOfCodeInSingleFileCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeEmbeddedCodeBlockCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeAssertionBlocksCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.HighDegreeDuplicationCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.GlobalConditionalsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FileSizeIssueCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FunctionArgumentsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.DuplicatedAssertionBlocksCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.NestedComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.GlobalNestedComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ConstructorOverInjectionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ComplexMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ComplexConditionalCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.DuplicationCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BumpyRoadCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BrainMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BrainClassCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.CodeHealthCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ACECodeVisionProvider"/>

        <fileEditorProvider
                implementation="com.codescene.jetbrains.codeInsight.codehealth.CodeSceneHtmlViewerProvider"/>
    </extensions>

    <projectListeners>
        <listener class="com.codescene.jetbrains.listeners.FileEditorLifecycleListener"
                  topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"/>
    </projectListeners>
    <applicationListeners>
        <listener class="com.codescene.jetbrains.listeners.CodeSceneDynamicPluginListener"
                  topic="com.intellij.ide.plugins.DynamicPluginListener"/>
    </applicationListeners>
</idea-plugin>
