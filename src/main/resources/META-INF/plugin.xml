<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <id>com.codescene.vanilla</id>
    <name>CodeScene</name>
    <vendor>CodeScene</vendor>

    <depends>com.intellij.modules.platform</depends>

    <!--  TODO: Add plugin icon  -->

    <resource-bundle>messages.UiLabelsBundle</resource-bundle>

    <idea-version since-build="231" until-build="242.*"/>

    <actions>
        <action
                text="Settings"
                id="ShowSettingsAction"
                icon="AllIcons.General.Gear"
                description="Open the settings dialog"
                class="com.codescene.jetbrains.actions.ShowSettingsAction"/>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <applicationService serviceImplementation="com.codescene.jetbrains.config.global.CodeSceneGlobalSettingsStore"/>

        <applicationConfigurable
                parentId="tools"
                displayName="CodeScene"
                instance="com.codescene.jetbrains.components.settings.CodeSceneSettings"/>

        <toolWindow
                id="CodeScene"
                icon="/toolWindow/logo-40x40.png"
                factoryClass="com.codescene.jetbrains.components.toolWindow.CodeSceneToolWindowFactory"/>

        <!-- An empty language attribute applies to all languages -->
        <externalAnnotator
                language=""
                implementationClass="com.codescene.jetbrains.codeInsight.annotator.CodeSmellAnnotator"/>

        <!-- The order of code vision providers' declarations determines their display sequence in the IDE.
             Providers listed first appear last. Adjust this order to control the hierarchy of code smell warnings shown.
        -->
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BumpyRoadCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ComplexConditionalCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BrainMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FunctionArgumentsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ComplexMethodCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.NestedComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.DuplicationCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ConstructorOverInjectionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.GlobalNestedComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.DuplicatedAssertionBlocksCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FileSizeIssueCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.GlobalConditionalsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.BrainClassCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.HighDegreeDuplicationCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeAssertionBlocksCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LargeEmbeddedCodeBlockCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LinesOfCodeInSingleFileCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LinesOfDeclarationInSingleFileCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.LowCohesionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.MissingAbstractionsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.ModularityIssueCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.FunctionsInSingleModuleCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.OverallCodeComplexityCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.PotentiallyLowCohesionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.PrimitiveObsessionCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.StringHeavyArgumentsCodeVisionProvider"/>
        <codeInsight.codeVisionProvider
                implementation="com.codescene.jetbrains.codeInsight.codeVision.providers.CodeHealthCodeVisionProvider"/>
    </extensions>

    <projectListeners>
        <listener class="com.codescene.jetbrains.listeners.FileLifecycleListener" topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"/>
    </projectListeners>
</idea-plugin>
